#! /usr/bin/env python

import re
import sys
import time
import logging
import argparse
import subprocess

def run(cmd, ret_stdout=False, trap_stderr=True):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  log.debug('Executing {cmd} with ret_stdout={ret_stdout}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if ret_stdout else None, stderr=subprocess.PIPE if trap_stderr else None)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  return stdout if ret_stdout else None

def goto(row, col):
  row = int(row)
  col = int(col)
  run('tput cup {row} {col}'.format(**locals()))

def write(s):
  sys.stdout.write(s)

def writeto(row, col, s):
  goto(row, col-len(s))
  write(s)

def to_int(s):
  ret = None
  match = to_int_regexp.search(s)
  if match:
    ret = int(match.group(1))
  return ret
  
def see(expr):
  value = eval(expr)
  log.info('{expr}={value!r}'.format(**locals()))

to_int_regexp = re.compile('(\d+)')

horizontal = unichr(9473)
vertical = unichr(9475)
topLeftCorner = unichr(9487)
topRightCorner = unichr(9491)
bottomLeftCorner = unichr(9495)
bottomRightCorner = unichr(9499)
  
parser = argparse.ArgumentParser(description='A sample use of ArgumentParser')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',  help='Enable verbose debugging')
args = parser.parse_args()

logging.basicConfig(filename='screentest.log', format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

cols = to_int(run('tput cols', ret_stdout=True, trap_stderr=False))
rows = to_int(run('tput lines', ret_stdout=True, trap_stderr=False))
clear = run('tput clear', ret_stdout=True)

see('cols')
see('rows')
see('clear')

write(clear)

# goto(0, 1)
# write(horizontal * (cols-2))
# 
# for row in range(1,rows-2):
#   goto(row, 0)
#   write(vertical)
#   goto(row, cols-1)
#   write(vertical)
# 
# goto(rows-2, 1)
# write(horizontal * (cols-2))
# 
# goto(0, 0)
# write('0,0')
# 
# writeto(rows-2, cols, '{rows},{cols}'.format(**locals()))
# 
# row = 0
# col = 0
# step = (cols*1.0)/rows
# while row < rows-1:
#   goto(row, col)
#   # time.sleep(.1)
#   row += 1
#   col += step
# 

for num in range(25):
  goto(num, num)
  write('{num},{num}'.format(**locals()))

goto(rows-2, 0)
