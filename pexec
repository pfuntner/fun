#! /usr/bin/env python2

import os
import sys
import time
import logging
import datetime
import threading
import subprocess

def see(expr):
  value = eval(expr)
  log.debug('{expr}: {value!r}'.format(**locals()))

def now():
  return str(datetime.datetime.now())

class Pipe(object):
  def __init__(self):
    self.pipe = os.pipe()
    self.read = os.fdopen(self.pipe[0], 'r', 0)
    self.write = os.fdopen(self.pipe[1], 'w', 0)

class Echo(threading.Thread):
  def __init__(self, in_stream, out_stream):
    super(Echo, self).__init__()
    self.in_stream = in_stream
    self.out_stream = out_stream
    self.start()

  def run(self):
    while True:
      line = self.in_stream.readline()
      if line:
        self.out_stream.write(now() + ' ' + line)
      else:
        break
  
logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG)

assert len(sys.argv) > 1, 'Syntax: {pgm} CMD ...'.format(pgm=sys.argv[0])

threads = []
out_pipe = Pipe()
err_pipe = Pipe()
p = subprocess.Popen(sys.argv[1:], stdout=out_pipe.write, stderr=err_pipe.write)
out_pipe.write.close()
err_pipe.write.close()
threads.append(Echo(out_pipe.read, sys.stdout))
threads.append(Echo(err_pipe.read, sys.stderr))
rc = p.wait()
while threading.active_count() > 1:
  time.sleep(1)
exit(rc)
