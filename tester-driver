#! /usr/bin/env python3

import os
import sys
import time
import errno
import signal
import logging
import argparse
import subprocess

parser = argparse.ArgumentParser(sys.argv[0])
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

(r, w) = os.pipe()
os.set_blocking(r, False)
p = subprocess.Popen([os.path.join(os.path.dirname(sys.argv[0]), 'tester')], stdout=w, stderr=w)
while p.poll() is None:
  try:
    c = os.read(r, 1)
    print(c.decode(), end='')
  except OSError as e:
    if e.errno == errno.EAGAIN:
      time.sleep(.1)
    else:
      log.error(f'os.read() failure: {e!s}')
      exit(1)
  except Exception as e:
    log.error(f'os.read() failure: {e!s}')
    exit(1)
