#! /usr/bin/env python

import os
import sys
import logging
import argparse
import threading
import subprocess

class Echo(threading.Thread):
  """
  Echo incoming data to an outgoing file or method
  """
  def __init__(self, alter, dest):
    """
    Echo class constructor:
      - Creates a pipe
      - Creates file objects on both ends of the pipe
      - Starts a thread which performs a loop until EOF on read end of the pipe:
        - Reads a block of data from the read end of the pipe
        - Do some sort of operation on the data
        - Send the data to a method that receives a string parameter for the block
      - Makes the both ends of the pipe and both file objects available to the caller

    @param alter: A method to send the data to alter the data.  The method accepts one parameter - the data block as a string.  The method is expected to return a string to send to the destination.  If it returns None or an empty string, it writes nothing for the block.
    @param dest: A method to receive the block which receives a string paramter
    """
    super(Echo, self).__init__()

    self.pipe = os.pipe()
    log.debug('Pipe is {self.pipe}'.format(**locals()))
    self.read_file = os.fdopen(self.pipe[0], 'r')
    self.write_file = os.fdopen(self.pipe[1], 'w')

    assert hasattr(alter, '__call__'), 'alter argument is not a method/function'
    self.alter = alter

    assert hasattr(dest, '__call__'), 'dest argument is not a a method/function'
    self.dest = dest

    # start the thread to process blocks
    self.start()

  def run(self):
    """
    This is the main function of the thread which reads blocks of data, edits the data in some way, sends the data to another file object or a method

    @returns None
    """
    log.info('Starting echo thread')
    while True:
      block = self.read_file.readline()
      if block:
        log.debug('Received {bytes} block: {block!r}'.format(bytes=len(block), **locals()))
        block = self.alter(block)
        log.debug('After alteration, it is a {bytes} block: {block!r}'.format(bytes=len(block), **locals()))

        if block:
          self.dest(block)
      else:
        log.debug('EOF on read pipe')
        break
    log.info('Thread is ending')
  
def alter(data):
  """
  This method is called by the Echo thread class for each block it reads.

  @param data: A block of data as a string
  @returns: A block of data as a string, presumably based on the input string
  """
  return data.lower()

parser = argparse.ArgumentParser(description='Trying out an `echo class`')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('pgm', help='Name of program to run')
parser.add_argument('args', nargs='*', help='Zero or more arguments')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

echo = Echo(alter, sys.stdout.write)
p = subprocess.Popen([args.pgm] + args.args, stdout=echo.write_file)
echo.write_file.close()
p.wait()
