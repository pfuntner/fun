#! /usr/bin/env python

import re
import sys
import json
import logging
import argparse

def load(stream):
  data = stream.read()

  if args.yaml:
    return yaml.load(data)

  try:
    ret = json.loads(data)
  except Exception as e:
    log.debug('Unable to load entire stream: {e!s}'.format(**locals()))
  else:
    log.info('Parsed entire stream')
    if type(ret) in [list, dict]:
      log.info('There are {count} elements'.format(**locals()))
    log.debug('Loaded {ret}'.format(**locals()))
    return ret

  buf = ''
  ret = []

  for line in data.splitlines():
    buf += ('\n' if buf else '') + line
    try:
      datum = json.loads(buf)
    except Exception as e:
      pass
    else:
      log.info('Parsed item {pos}'.format(pos=len(ret)))
      log.debug('Loaded {datum}'.format(**locals()))
      ret.append(datum)
      buf = ''

  if buf:
    total = len(data)
    sys.stderr.write('Failed to load entire file\n')
    sys.stderr.write('{count:,} objects were loaded\n'.format(count=len(ret)))
    sys.stderr.write('{processed:,} bytes out of {total:,} were loaded\n'.format(processed=total-len(buf), **locals()))
    exit(1)

  return ret

def defaultWriter(root):
  print json.dumps(root)

def linearWriter(root):
  if isinstance(root, list):
    for datum in root:
      print json.dumps(datum)
  else:
    sys.stderr.write('Can only use --linear on lists\n')
    exit(1)

def flatWriter(root, path=[]):
  if type(root) in [list, dict]:
    for key in range(len(root)) if isinstance(root, list) else root.keys():
      flatWriter(root[key], path + [str(key)])
  else:
    print '/{path} {root}'.format(path='/'.join(path), root=root)

parser = argparse.ArgumentParser(description='JSON tool')
group = parser.add_mutually_exclusive_group()
group.add_argument('-f', '--flatten', dest='flatten', action='store_true', help='Flatten elements')
group.add_argument('-l', '--linear', dest='linear', action='store_true', help='Print elements linearly')

parser.add_argument('-y', '--yaml', dest='yaml', action='store_true', help='Read input yaml file')
parser.add_argument('-F', '--file', dest='file', help='Input file')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable more debugging')

parser.add_argument('path', nargs='?', help='Path to desired object(s)')
args = parser.parse_args()

yaml = None
if args.yaml:
  # let's import yaml module only when the option is specified, in case the module is not installed
  yaml = __import__('yaml')

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if args.flatten:
  writer = flatWriter
elif args.linear:
  writer = linearWriter
else:
  writer = defaultWriter

root = None
if args.file:
  with open(args.file) as stream:
    root = load(stream)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be directed if --file is not specified')
  root = load(sys.stdin)

writer(root)
