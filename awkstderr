#! /usr/bin/env python

import os
import logging
import argparse
import paramiko

def ssh(user, host, cmd, password=None, stdin=None):
  """
  Use Paramiko package to ssh to a remote system

  :param user: The name of the user on the remote system, as a string
  :param host: The name or IP address of the remote system, as a string
  :param cmd: The command to run on the remote system, as a string
  :param password: Optional password as a string.  If the password is None, ssh will try to use the
  user's rsa ssh key
  :param stdin: Optional stdin as a string to be fed to the remote command.
  :return: A 3-element tuple:
    #1: exit status of command
    #2: stdout as a string
    #3: stderr as a string
  """
  rc = None
  stdout = ''
  stderr = ''
  client = paramiko.SSHClient()
  client.load_system_host_keys(filename='/dev/null')
  client.load_host_keys(filename='/dev/null')
  client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  try:
    log.debug('Connecting to {user}@{host}'.format(**locals()))
    client.connect(
      username=user,
      password=password,
      hostname=host,
      key_filename=None if password else os.path.join(os.environ['HOME'], '.ssh/id_rsa'),
    )
  except paramiko.SSHException as e:
    log.warning('Cannot connect to controller {user}@{host}: {e!s}'.format(**locals()))
    client = None
  else:
    try:
      channel = client.get_transport().open_session()
      log.debug('Executing {cmd!r}'.format(**locals()))
      channel.exec_command(cmd)
    except paramiko.SSHException as e:
      log.warning('Cannot execute {cmd!r} on controller {user}@{host}: {e!s}', format(**locals()))
    else:
      if stdin:
        log.debug('Sending {stdin!r} as stdin'.format(**locals()))
        channel.send(stdin)
      channel.shutdown_write() # send EOF to remote stdin
      log.debug('Getting exit status')
      rc = channel.recv_exit_status()
      log.debug('Getting stdout')
      stdout = channel.recv(2**64)
      log.debug('Getting stderr')
      stderr = channel.recv_stderr(2**64)
  if client:
    log.debug('Closing paramiko client')
    client.close()
  log.debug('{rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return rc, stdout, stderr

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

(rc, stdout, stderr) = ssh('jpfuntne', os.environ['DEV'], """awk 'BEGIN { print "hello, world" > "/dev/stderr" }'""")

print '{rc}, {stdout!r}, {stderr!r}'.format(**locals())
