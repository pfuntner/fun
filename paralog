#! /usr/bin/env python

"""
Example of using paramiko to get stdout, stderr, and exit value from a remote command.  This depends on the ssh key and does not require password.  It can probably be extended to accept a password instead.

This also avoids exposing logging from paramiko which can happen if you're not careful about setting up logging on the caller.
"""

"""
Example:

  bxb-mitg7-dev23 ~/python> ./paralog -n -v ubuntu $STAGING -- jpfuntne/bin/dummycmd -o out -e err -s 42
  2019-02-26 10:43:30,410 DEBUG ./paralog:70 About to ssh
  2019-02-26 10:43:30,410 DEBUG ./paralog:30 Importing paramiko
  2019-02-26 10:43:42,692 DEBUG ./paralog:32 Imported paramiko
  (42, 'out\n', 'err\n')
  2019-02-26 10:43:48,654 DEBUG ./paralog:72 Back from ssh
  bxb-mitg7-dev23 ~/python> 

I don't know why paramiko takes so long.  The import itself seems to be very slow.
"""

import os
import sys
import logging
import argparse

def ssh(user, host, cmd):
  rc = None
  stdout = ''
  stderr = ''
  log.debug('Importing paramiko')
  paramiko = __import__('paramiko')
  log.debug('Imported paramiko')
  client = paramiko.SSHClient()
  client.load_system_host_keys(filename='/dev/null')
  client.load_host_keys(filename='/dev/null')
  client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  try:
    client.connect(username=user, hostname=host, key_filename=os.path.join(os.environ['HOME'], '.ssh/id_rsa'))
  except paramiko.SSHException as e:
    log.warning('Cannot connect to controller {user}@{host}: {e!s}',format(**locals()))
    client = None
  else:
    try:
      channel = client.get_transport().open_session()
      channel.exec_command(cmd)
    except paramiko.SSHException as e:
      log.warning('Cannot execute {cmd!r} on controller {user}@{host}: {e!s}', format(**locals()))
    else:
      rc = channel.recv_exit_status()
      stdout = channel.recv(2**64)
      stderr = channel.recv_stderr(2**64)
  if client:
    client.close()
  return rc, stdout, stderr

base = os.path.basename(sys.argv[0])
parser = argparse.ArgumentParser()
parser.add_argument('user', help='Remote user to which to ssh')
parser.add_argument('system', help='Remote system to which to ssh')
parser.add_argument('cmd', help='Command to execute on remote system')
parser.add_argument('args', metavar='arg', nargs='*', help='Command arguments for remote system')
parser.add_argument('-n', '--name', dest='name', action='store_true', help='Use logging.getlogger({base!r})'.format(**locals()))
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(base if args.name else None)
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug('About to ssh')
print ssh(args.user, args.system, '{cmd} {args}'.format(cmd=args.cmd, args=' '.join(args.args)))
log.debug('Back from ssh')
