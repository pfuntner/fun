#! /usr/bin/python

import sys
import datetime
import subprocess
import re
import getopt
import json
import os

def makeDate(year, lastday):
  timestamp = datetime.datetime.strptime("%d/%02d/01" % (year, lastday["month"]+1), "%Y/%m/%d")
  occurence = 0
  while (timestamp.weekday() != lastday["weekday"]) or (occurence != lastday["occurence"]):
    # print "Nope, this isn't it: %s, %d, %d" % (timestamp, timestamp.weekday(), occurence)
    if timestamp.weekday() == lastday["weekday"]:
      occurence += 1
    timestamp += datetime.timedelta(days=1)

  return datetime.datetime.strptime(timestamp.strftime("%Y/%m/%d") + ' ' + lastday["time"], "%Y/%m/%d %H:%M")

def toUTC(timestamp):
  """
    Convert a timestamp expressed in the local timezone to UTC in the following format:
      YYYY-mm-ddTHH:MM:SS.mmmZ
  """

  zoneInfo = zones[zone]
  stdOffset = zoneInfo["stdoffset"] * 60 * 60
  if "dstoffset" in zoneInfo:
    dstOffset = zoneInfo["dstoffset"] * 60 * 60

    laststd = makeDate(timestamp.year, zoneInfo["laststd"])
    lastdst = makeDate(timestamp.year, zoneInfo["lastdst"])

    print "last STD: %s" % laststd
    print "last DST: %s" % lastdst

    if (timestamp > laststd) and (timestamp < lastdst):
      utcOffset = dstOffset
    else:
      utcOffset = stdOffset
  else:
    utcOffset = stdOffset

  print "utcOffset: %d" % utcOffset
  """
    Convert the timestamp to UTC by subtracting the offset
  """
  timestamp = timestamp - datetime.timedelta(seconds=utcOffset)
  return timestamp.strftime("%Y-%m-%dT%H:%M:%S.") + timestamp.strftime("%f")[:3] + 'Z'

format = "%Y/%m/%d %H:%M:%S.%f"
zone = "EST5EDT"

zones = None
zonesFilename = "%(HOME)s/data/timezones.json" % os.environ
with open(zonesFilename, "r") as f:
  zones = json.load(f)
assert zone in zones, "Did not find `%s` in `%s`" % (zone, zonesFilenamme)

(opts,args) = getopt.getopt(sys.argv[1:], "z:", ["zone="])
for (opt,arg) in opts:
  if opt in ["-z", "--zone"]:
    zone = arg
  else:
    sys.stderr.write("Unhandled option `%s`\n" % opt)
    exit(1)

# default timestamp format: 2016/12/30 18:34:34.667518
sample = None
if args:
  sample = datetime.datetime.strptime(args[0], "%Y/%m/%d %H:%M:%S.%f")
else:
  sample = datetime.datetime.now()

print "Sample: %s" % sample.strftime(format)

"""
p = subprocess.Popen("date +%::z".split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
assert p.wait() == 0, "`date` returned with %d: %s" % (p.returncode, repr(stderr))

stdout = stdout.strip('\n')
match = re.match("(-?)(\d{1,2}):(\d{1,2}):(\d{1,2})$", stdout)
assert match, "Could not parse: `%s`" % stdout

utcOffset = (int(match.group(2))*3600 + int(match.group(3))*60 + int(match.group(4))) * -1 if match.group(1) else 1

utc = sample - datetime.timedelta(seconds=utcOffset)

print "UTC: %s" % utc.strftime(format)
"""

utc = toUTC(sample)
print "UTC:    %s" % utc

"""
diff = utc - datetime.datetime.utcfromtimestamp(0)
print "Since epoch: %s, or %f seconds" % (diff, diff.total_seconds())
"""
