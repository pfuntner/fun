#! /usr/bin/env python

import re
import os
import sys
import stat
import json
import subprocess

def get_executable(*paths):
  for path in paths:
    if '/' not in path:
      if path in executables:
        return path
    elif os.path.isfile(path):
      return path
  return paths[0]

def try_numeric(s):
  try:
    return int(s)
  except:
    try:
      return float(s)
    except:
      return s

regexp = re.compile(r'\s*\|\s*')

executables = dict()
for dir in os.environ['PATH'].split(':'):
  if (not dir.startswith('/mnt/')) and os.path.isdir(dir):
    for executable in os.listdir(dir):
      path = os.path.join(dir, executable)
      if os.path.isfile(path):
        st = os.stat(path)
        if st.st_mode & stat.S_IXUSR:
          executables[executable] = path

p = subprocess.Popen([get_executable('osqueryi', 'c:/Program Files/osquery/osqueryi.exe', '/mnt/c/Program Files/osquery/osqueryi.exe')], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
p.stdin.write('select * from processes;'.encode())
# p.stdin.close()
(binary_stdout, binary_stderr) = p.communicate()
rc = p.wait()
assert rc == 0

headings = list()
processes = list()

for line in binary_stdout.decode().splitlines():
  tokens = regexp.split(line)
  if len(tokens) > 1:
    if len(headings) == 0:
      headings = tokens[1:-1]
    else:
      assert len(tokens) == len(headings), f'Token count mismatch: expected {len(headings)} but got {len(tokens)}'
      processes.append({key: try_numeric(tokens[pos+1]) for (pos, key) in enumerate(headings)})

json.dump(processes, sys.stdout)
